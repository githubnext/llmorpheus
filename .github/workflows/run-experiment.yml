name: Run mutation testing experiment

on:
  workflow_dispatch:
    inputs:
      packages:
        description: "Packages to generate tests for"
        default: "+benchmarks.txt"
      temperatures:
        description: "Sampling temperatures to try when obtaining completions (whitespace-separated)"
        default: "0.0"
      numCompletions:
        description: "Number of completions to generate for each prompt"
        default: "5"
      model:
        description: "Which LLM API to use"
        type: "choice"
        options:
          - "gpt"
          - "starcoder"
          - "davinci"
        default: "davinci"
      skipSlowBenchmarks:
        description: "Skip slow benchmarks"
        type: boolean
        default: false
      debug_enabled:
        type: boolean
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        default: false
  # Run every weekday at 2:00 AM UTC
  # schedule:
  #   - cron: '0 2 * * 1-5'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      packages: "${{ steps.parse_packages.outputs.packages }}"
      temperatures: "${{ github.event.inputs.temperatures || '0.0' }}"
      numCompletions: "${{ github.event.inputs.numCompletions || '5' }}"
      model: "${{ github.event.inputs.model || 'davinci' }}"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 12

      - id: parse_packages
        run: |
          packages=$(node ${GITHUB_WORKSPACE}/.github/parse_packages.js \
            ${{ github.event.inputs.skipSlowBenchmarks == 'true' && '--skip-slow-benchmarks' || '' }} \
            "${{ github.event.inputs.packages || '+benchmarks.txt' }}")
          echo "packages=$packages" >> $GITHUB_OUTPUT

  benchmark:
    needs:
      - setup
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.setup.outputs.packages) }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: llm-mutation-testing

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 12

      - name: Set up llm-mutation-testing
        run: |
          cd llm-mutation-testing
          npm run build

      - name: Checkout github package repo
        if: ${{ matrix.package.host == 'github.com' }}
        uses: actions/checkout@v3
        with:
          repository: ${{ format('{0}/{1}', matrix.package.owner, matrix.package.repo) }}
          ref: ${{ matrix.package.sha }}
          path: "source"
      
      - name: Checkout gitlab package repo
        if: ${{ matrix.package.host == 'gitlab.com' }}
        run: |
          git clone ${{ format('https://gitlab.com/{0}/{1}', matrix.package.owner, matrix.package.repo) }} source
          cd source
          git checkout ${{ matrix.package.sha }}

      - name: Determine package name
        id: pkg-name
        run: |
          # name of the package
          PACKAGE_NAME=$(cat source/${{ matrix.package.path }}/package.json | jq -r .name )

          # some packages have a / in their names (looking at you, gitlab-js!)
          if [[ "$PACKAGE_NAME" == *"/"* ]]; then
            PACKAGE_NAME=${PACKAGE_NAME##*/}
          fi

          # path to the package within the repo checkout
          PACKAGE_PATH="$GITHUB_WORKSPACE/$PACKAGE_NAME/${{ matrix.package.path }}"
          # make sure there isn't already a directory with the same name
          if [ -d "$PACKAGE_PATH" ]; then
            echo "ERROR: $PACKAGE_PATH already exists"
            exit 1
          fi
          # rename checkout, since some packages examine its name (looking at you, bluebird!)
          mv source $PACKAGE_NAME
          echo "Package name: $PACKAGE_NAME, path: $PACKAGE_PATH"
          # export environment variables
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_PATH=$PACKAGE_PATH" >> $GITHUB_ENV
          echo "pkgName=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Install package, its dependencies, and test packages
        run: |
          cd $PACKAGE_PATH
          npm i || npm i --legacy-peer-deps
          # if matrix.package.dependencies is not empty, install them
          if ! [ -z "${{ matrix.package.dependencies }}" ]; then
            npm i ${{ matrix.package.dependencies }}
          fi
          npm run build || npm run prepack || echo 'Error with npm run build and npm run prepack'
          npm i --no-save mocha

      - name: Generate mutants
        env:
          TEXTDAVINCI003_API_ENDPOINT: "https://api.openai.com/v1/engines/text-davinci-003/completions"
          TEXTDAVINCI003_AUTH_HEADERS: '${{ secrets.DAVINCI_AUTH_HEADERS }}'
          STARCODER_API_ENDPOINT: '${{ secrets.STARCODER_API_ENDPOINT3 }}'
        run: |
          cd llm-mutation-testing
          outputdir="results/$PACKAGE_NAME"
          mkdir -p $outputdir 
          echo "Generating mutants for $PACKAGE_NAME"
          node --max-old-space-size=6144 benchmark/createMutants.js \
            --outputDir $outputdir \
            --path "$PACKAGE_PATH" \
            --caching false \
            --promptTemplateFileName "test/input/newTemplate.hb"
        
      - name: Zip up results
        run: |
          zip -r results.zip $PACKAGE_PATH/MUTATION_TESTING

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

  combine_output:
    name: Combine output from all benchmarks
    needs:
      - setup
      - benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Download output zips
        uses: actions/download-artifact@v2

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Combine output zips
        run: |
          mkdir results
          cd results
          for zip in ../results-*/results.zip
          do
            unzip -oq $zip
          done
          mv home/runner/work/llm-mutation-testing/llm-mutation-testing/* .
          rm -rf home
          cd ..
          rm -rf results-*
          zip -r results.zip results
          echo "FILES:"
          ls -al
      - name: Upload combined output files
        uses: actions/upload-artifact@v2
        with:
          name: results-all
          path: results.zip
