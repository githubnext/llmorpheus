name: Generate Mutants 2

on:
  workflow_dispatch:
    inputs:
      packages:
        description: "JSON file that specifies packages to generate mutants for"
        default: "benchmarks.json"
      temperatures:
        description: "Sampling temperatures to try when obtaining completions (whitespace-separated)"
        default: "0.0"
      # model:
      #   description: "Which LLM API to use"
      #   type: "choice"
      #   options:
      #     - "gpt3.5-turbo"
      #     - "gpt4"
      #     - "text-davinci003"
      #   default: "gpt4"
      # debug_enabled:
      #   type: boolean
      #   description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
      #   default: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      packages: "${{ steps.parse_packages.outputs.packages }}"
      temperatures: "${{ github.event.inputs.temperatures || '0.0' }}"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - id: parse_packages
        run: |
          packages=$(node \
                     .github/find_benchmarks.js " \
                     .github/${{ github.event.inputs.packages || 'benchmarks.json' }}")
          packages=$(echo $packages | tr '\n' ' ')
          echo "packages=$packages" >> $GITHUB_OUTPUT

  benchmark:
    needs:
      - setup
    runs-on: ubuntu-latest

    # steps:
    #   - name : print needs
    #     run: |
    #       echo "packages=${{ fromJson(needs.setup.outputs.packages) }}"
          
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.setup.outputs.packages) }}
    steps:
      - name: print package
        run: |
          echo "package.host=${{ matrix.package.host }}" 
          echo "package.name=${{ matrix.package.name }}"
          echo "package.owner=${{ matrix.package.owner }}"
          echo "package.repo=${{ matrix.package.repo }}"
          echo "package.sha=${{ matrix.package.sha }}"
          echo "package.edits=${{ matrix.package.edits }}"

      - name: check out benchmark
        if: ${{ matrix.package.host == 'github.com' }}
        uses: actions/checkout@v3
        with:
          repository: ${{ format('{0}/{1}', matrix.package.owner, matrix.package.repo) }}
          ref: ${{ matrix.package.sha }}
          path: ${{ matrix.package.name }}

      - name: build project
        run: |
          cd ${{ matrix.package.name }}
          npm install
          # if an edit command for editing package.json is specified (e.g., to disable linting), run it
          if [ -n "${{ matrix.package.edits }}" ]; then
            edits=$(echo "${{ matrix.package.edits }}" | tr '\n' ' ')
            eval $edits
          fi
          npm run build
    
      - name: go into project and install install-local
        run: |
          cd ${{ matrix.package.name }}
          npm install install-local   
    
# name: Generate Mutants 2

# on:
#   workflow_dispatch:
#     inputs:
#       packages:
#         description: "Packages to generate tests for"
#         default: "+benchmarks.json"

# jobs:
#   generate-mutants:
#     runs-on: ubuntu-latest
#     outputs:
#       packages: "${{ steps.parse_packages.outputs.packages }}"
#     steps:
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 12

#       - id: parse_packages
#         run: |
#           packages=$(node ${GITHUB_WORKSPACE}/.github/find_benchmarks.js \
#             "${{ github.event.inputs.packages || '+benchmarks.json' }}")
#           echo "packages=$packages" >> $GITHUB_OUTPUT

      # - uses: actions/checkout@v3

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 12

      # - name: checkout https://github.com/maugenst/zip-a-folder/tree/d2ea465b20dc33cf8c98c58a7acaf875c586c3e1 into directory PROJECT
      #   uses: actions/checkout@v3
      #   with:
      #     repository: maugenst/zip-a-folder
      #     ref: d2ea465b20dc33cf8c98c58a7acaf875c586c3e1
      #     path: PROJECT

      # - name: build project
      #   run: |
      #     cd PROJECT
      #     npm install
      #     # replace " && npm run lint" with "" in package.json
      #     sed -i -e 's/ && npm run lint//' package.json
      #     npm run build
          
      # - name: print package.json
      #   run: |
      #     cat PROJECT/package.json

      # - name: Check out llm-mutation-testing
      #   uses: actions/checkout@v3
      #   with:
      #     path: llm-mutation-testing
  
      # - name: Set up llm-mutation-testing
      #   run: |
      #     cd llm-mutation-testing
      #     npm run build

      # - name: Generate mutants
      #   env:
      #     PERPLEXITY_AI_API_ENDPOINT: '${{ secrets.PERPLEXITY_AI_API_ENDPOINT }}'
      #     PERPLEXITY_AI_AUTH_HEADERS: '${{ secrets.PERPLEXITY_AI_AUTH_HEADERS }}'
      #   run: |
      #     cd llm-mutation-testing
      #     echo "Generating mutants for zip-a-folder" 
      #     command="node --max-old-space-size=6144 benchmark/createMutants.js --path ../PROJECT --model codellama-34b-instruct --promptTemplateFileName test/input/newTemplate.hb --caching false --temperature 0.0 --rateLimit 10000 --mutate lib/ZipAFolder.ts"
      #     echo "Running command: $command"
      #     eval $command