[
  {
    "rule": {
      "ruleId": "4",
      "rule": "<Expr> || {} -> <Expr>",
      "description": "replace binary || expression with its first operand if the second operand is an empty object literal"
    },
    "originalCode": "getTimezonesMap(data)[id] || {}",
    "replacement": "getTimezonesMap(data)[id]",
    "file": "src/build-country.js",
    "startLine": 7,
    "startColumn": 16,
    "endLine": 7,
    "endColumn": 47,
    "promptId": 0,
    "completionId": 0,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "return timezonesMap;",
    "replacement": "return !timezonesMap;",
    "file": "src/build-country.js",
    "startLine": 19,
    "startColumn": 2,
    "endLine": 19,
    "endColumn": 22,
    "promptId": 1,
    "completionId": 1,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "2",
      "rule": "<Expr> === <Expr> -> <Expr> !== <Expr>",
      "description": "replace === operator in condition with !=="
    },
    "originalCode": "if (tz.r === undefined) result[country].current.push(id);",
    "replacement": "if (tz.r !== undefined) result[country].current.push(id);",
    "file": "src/build-country.js",
    "startLine": 33,
    "startColumn": 6,
    "endLine": 33,
    "endColumn": 63,
    "promptId": 2,
    "completionId": 4,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "4",
      "rule": "<Expr> || {} -> <Expr>",
      "description": "replace binary || expression with its first operand if the second operand is an empty object literal"
    },
    "originalCode": "const aliasTz = data.timezones[a] || {};",
    "replacement": "const aliasTz = data.timezones[a];",
    "file": "src/build-country.js",
    "startLine": 26,
    "startColumn": 4,
    "endLine": 26,
    "endColumn": 44,
    "promptId": 3,
    "completionId": 5,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "if (!countries) return result;",
    "replacement": "if (countries) return !result;",
    "file": "src/build-country.js",
    "startLine": 29,
    "startColumn": 4,
    "endLine": 29,
    "endColumn": 34,
    "promptId": 4,
    "completionId": 7,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "return result;",
    "replacement": "return !result;",
    "file": "src/build-country.js",
    "startLine": 37,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 18,
    "promptId": 4,
    "completionId": 7,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "1",
      "rule": "<Expr> + <Expr> -> <Expr> - <Expr>",
      "description": "replace + operator in binary expression with -"
    },
    "originalCode": "const sign = offset < 0 ? '-' : '+';",
    "replacement": "const sign = offset < 0 ? '+' : '-';",
    "file": "src/build-timezone.js",
    "startLine": 32,
    "startColumn": 2,
    "endLine": 32,
    "endColumn": 38,
    "promptId": 7,
    "completionId": 11,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "return result;",
    "replacement": "return !result;",
    "file": "src/build-timezone.js",
    "startLine": 26,
    "startColumn": 2,
    "endLine": 26,
    "endColumn": 16,
    "promptId": 8,
    "completionId": 12,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "3",
      "rule": "<Expr> !== <Expr> -> <Expr> === <Expr>",
      "description": "replace !== operator in condition with ==="
    },
    "originalCode": "if (totalTimezones !== memoizedTimezones) Object.keys(data.timezones).forEach(getTimezone);",
    "replacement": "if (totalTimezones === memoizedTimezones) Object.keys(data.timezones).forEach(getTimezone);",
    "file": "src/index.js",
    "startLine": 17,
    "startColumn": 2,
    "endLine": 17,
    "endColumn": 93,
    "promptId": 9,
    "completionId": 13,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "return timezones[name] ? { ...timezones[name] } : null;",
    "replacement": "return !timezones[name] ? { ...timezones[name] } : null;",
    "file": "src/index.js",
    "startLine": 33,
    "startColumn": 2,
    "endLine": 33,
    "endColumn": 57,
    "promptId": 11,
    "completionId": 15,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "4",
      "rule": "<Expr> || {} -> <Expr>",
      "description": "replace binary || expression with its first operand if the second operand is an empty object literal"
    },
    "originalCode": "const timezone = getTimezone(tzName) || {};",
    "replacement": "const timezone = getTimezone(tzName);",
    "file": "src/index.js",
    "startLine": 43,
    "startColumn": 2,
    "endLine": 43,
    "endColumn": 45,
    "promptId": 12,
    "completionId": 16,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "return main || null;",
    "replacement": "return !(main || null);",
    "file": "src/index.js",
    "startLine": 50,
    "startColumn": 2,
    "endLine": 50,
    "endColumn": 22,
    "promptId": 13,
    "completionId": 18,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "5",
      "rule": "return <Expr>; -> return !<Expr>;",
      "description": "negate return expression"
    },
    "originalCode": "return values.map(getTimezone);",
    "replacement": "return !values.map(getTimezone);",
    "file": "src/index.js",
    "startLine": 57,
    "startColumn": 2,
    "endLine": 57,
    "endColumn": 33,
    "promptId": 13,
    "completionId": 19,
    "comment": ""
  },
  {
    "rule": {
      "ruleId": "4",
      "rule": "<Expr> || {} -> <Expr>",
      "description": "replace binary || expression with its first operand if the second operand is an empty object literal"
    },
    "originalCode": "const { deprecated } = options || {};",
    "replacement": "const { deprecated } = options;",
    "file": "src/index.js",
    "startLine": 71,
    "startColumn": 2,
    "endLine": 71,
    "endColumn": 39,
    "promptId": 15,
    "completionId": 23,
    "comment": ""
  }
]