Mutation testing is a technique that involves modifying a program in small ways, in
order to find weaknesses in a project's test suite. The goal is to change the
behavior of the program, and then check whether the tests notice. When they do
not, that indicates that the tests may not be as effective as the developer
might have hoped.

Your task is to apply mutation testing to the following code:
```
let timezonesMap;

export default function buildCountry(data, id) {
  const name = data.countries[id];
  if (<PLACEHOLDER>) return null;

  const tzMap = getTimezonesMap(data)[id] || {};

  return {
    id,
    name,
    timezones: tzMap.current || [],
    allTimezones: tzMap.all || [],
  };
}

function getTimezonesMap(data) {
  if (!timezonesMap) timezonesMap = buildTimezonesMap(data);
  return timezonesMap;
}

function buildTimezonesMap(data) {
  return Object.keys(data.timezones).reduce((result, id) => {
    const tz = data.timezones[id];
    const { c, a } = tz;
    const aliasTz = data.timezones[a] || {};
    const countries = c || aliasTz.c;

    if (!countries) return result;

    countries.forEach((country) => {
      if (!result[country]) Object.assign(result, { [country]: { current: [], all: [] } });
      if (tz.r === undefined) result[country].current.push(id);
      result[country].all.push(id);
    });

    return result;
  }, {});
}

```

by replacing the PLACEHOLDER with a buggy piece of code that behaves different
from the original code fragment, which was:
```
!name
```
Please consider changes such as using different operators, changing constants,
referring to different variables, object properties, functions, or methods.  

Provide three answers as fenced code blocks containing a single line of code, 
using the following template:

Option 1: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 2: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 3: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Please conclude your response with "DONE." 